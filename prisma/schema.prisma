// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sites         Site[]    @relation(name: "UserSites")

  @@map("users")
}

model LoginToken {
  id        String   @id @default(uuid())
  email     String
  expiresAt DateTime

  @@map("login_tokens")
}

model Site {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  name            String
  subdomain       String    @unique
  user            User      @relation(name: "UserSites", fields: [userId], references: [id])
  userId          String
  posts           Post[]    @relation(name: "SitePosts")
  domains         Domain[]  @relation(name: "SiteDomains")
  primaryDomain   Domain?   @relation(name: "SitePrimaryDomain", fields: [primaryDomainId], references: [id])
  primaryDomainId String?   @unique
  postTags        PostTag[] @relation(name: "SitePostTags")
  introduction    String?

  @@map("sites")
}

model Post {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime  @default(now())
  published   Boolean   @default(false)
  title       String
  content     String
  format      String    @default("markdown")
  slug        String    @unique
  site        Site      @relation(name: "SitePosts", fields: [siteId], references: [id])
  siteId      String
  tags        PostTag[] @relation(name: "PostTags")

  @@map("posts")
}

model Domain {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  site                 Site     @relation(name: "SiteDomains", fields: [siteId], references: [id])
  siteId               String
  domain               String   @unique
  primaryDomainForSite Site?    @relation(name: "SitePrimaryDomain")

  @@map("domains")
}

model PostTag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  slug      String
  posts     Post[]   @relation(name: "PostTags")
  site      Site     @relation(name: "SitePostTags", fields: [siteId], references: [id])
  siteId    String

  @@unique([slug, siteId])
  @@map("post_tags")
}
