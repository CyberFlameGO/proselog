// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String       @id @default(uuid())
  name          String
  username      String       @unique
  email         String       @unique
  emailVerified DateTime?
  avatar        String?
  bio           String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  apiToken      String       @unique
  deletedAt     DateTime?
  memberships   Membership[]

  @@map("users")
}

model LoginToken {
  id        String   @id @default(uuid())
  email     String
  expiresAt DateTime

  @@map("login_tokens")
}

enum MembershipRole {
  // The creator
  OWNER
  // The admins
  ADMIN
  // The subscribers
  SUBSCRIBER
}

model Membership {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  site           Site           @relation(fields: [siteId], references: [id], onDelete: Cascade)
  userId         String
  siteId         String
  role           MembershipRole
  acceptedAt     DateTime?
  lastSwitchedTo DateTime       @default(now())

  @@map("memberships")
}

model Site {
  id              String       @id @default(uuid())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  name            String
  subdomain       String       @unique
  posts           Post[]       @relation(name: "SitePosts")
  domains         Domain[]     @relation(name: "SiteDomains")
  primaryDomain   Domain?      @relation(name: "SitePrimaryDomain", fields: [primaryDomainId], references: [id])
  primaryDomainId String?      @unique
  bio             String?
  twitter         String?
  deletedAt       DateTime?
  memberships     Membership[]

  @@map("sites")
}

model Post {
  id               String    @id @default(uuid())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  contentUpdatedAt DateTime  @default(now())
  publishedAt      DateTime  @default(now())
  published        Boolean   @default(false)
  title            String
  content          String
  excerpt          String
  format           String    @default("markdown")
  slug             String    @unique
  site             Site      @relation(name: "SitePosts", fields: [siteId], references: [id], onDelete: Cascade)
  siteId           String
  tags             PostTag[] @relation(name: "PostTags")
  deletedAt        DateTime?

  @@map("posts")
}

model Domain {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  site                 Site     @relation(name: "SiteDomains", fields: [siteId], references: [id], onDelete: Cascade)
  siteId               String
  domain               String   @unique
  primaryDomainForSite Site?    @relation(name: "SitePrimaryDomain")

  @@map("domains")
}

model PostTag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  slug      String
  posts     Post[]   @relation(name: "PostTags")


  @@map("post_tags")
}
